{"version":3,"sources":["components/nav/RSVP.js","components/nav/NavBar.js","components/header/Header.js","components/thanks/Thanks.js","components/footer/Footer.js","components/cards/Card.js","components/cards/CardList.js","components/checkboxes/Checkbox.js","App.js","index.js"],"names":["RSVPButton","className","href","NavBar","props","useState","expanded","setExpanded","Navbar","expand","fixed","Brand","Toggle","aria-controls","onClick","Collapse","id","Nav","Link","Header","src","alt","Thanks","Footer","target","Date","getFullYear","CardHTML","studentFocus","mate","contactList","linkedIn","github","personalSite","dribbble","renderTooltip","Tooltip","Card","focus","Img","photo","Body","Title","as","firstName","lastName","Text","ButtonGroup","aria-label","map","contactLink","contactIconPath","contactIconName","output","indexOf","OverlayTrigger","placement","delay","show","hide","overlay","Button","Image","roundedCircle","fluid","CardList","filteredMates","CheckboxView","allMates","setAllMates","showMates","setShowMates","checkFE","setCheckFE","checkBE","setCheckBE","handleCheckChange","event","name","newValue","useEffect","fetch","then","response","json","data","sort","a","b","nameA","toUpperCase","nameB","filterNames","cohortMates","filter","includes","type","checked","onChange","class","Container","Row","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.128ade81.chunk.js","sourcesContent":["import React from 'react';\nexport const RSVPButton = () => (\n    // Changed \"warning\" to match our yellow in variables.scss\n    <div className=\"text-center mt-4\">\n        <div className=\"rsvpButton pl-4\">\n            <a className=\"rsvp btn  btn-warning mb-4\" href=\"https://www.eventbrite.com/e/nashville-software-school-info-session-tickets-76478111089\">\n                <strong>RSVP FOR DEMO DAY FEB 12, 2021</strong>\n            </a>\n        </div>\n    </div>\n)","import { React, useState } from 'react'\nimport { RSVPButton } from './RSVP'\nimport { Navbar, Nav } from 'react-bootstrap'\nexport const NavBar = (props) => {\n    const [expanded, setExpanded] = useState(false);\n    return (\n        <>\n            <Navbar className=\"nav-container\" expand=\"xl\" fixed=\"top\" expanded={expanded}>\n                <Navbar.Brand href=\"#page-top\"><strong>Nashville Software School</strong></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"mainNavBurger\" onClick={() => setExpanded(expanded ? false : \"expanded\")} />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link onClick={() => setExpanded(false)} href=\"#devs\">Developers</Nav.Link>\n                        <Nav.Link onClick={() => setExpanded(false)} href=\"#tech\">Our Tech Stack</Nav.Link>\n                    </Nav>\n                    <RSVPButton />\n                </Navbar.Collapse>\n            </Navbar>\n        </>\n    )\n};","import React from 'react'\n\nexport const Header = () => {\n    return (\n\n        <header className=\"masthead bg-white\" id=\"page-top\">\n            <div className=\"masthead-container\">\n                <h1 className=\"masthead-heading\">Hire your next developer</h1>\n            </div>\n            <img className=\"cohort-43-logo\" src=\"../../images/NSS Logo with 43.png\" alt=\"Cohort 43 Logo\" />\n        </header>\n\n    )\n}","import React from 'react'\nimport './Thanks.scss'\nimport { RSVPButton } from '../nav/RSVP'\n\nexport const Thanks = () => {\n    return (\n        <section className=\"page-section bg-primary text-white mb-0\" id=\"thanks\">\n            <div className=\"container\">\n                <h2 className=\"page-section-heading text-center text-uppercase text-white\">A special thank you to...</h2>\n\n                <div className=\"divider-custom divider-light\">\n                    <div className=\"divider-custom-line\"></div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"col-lg-6 ml-auto\">\n                        <p className=\"lead thanksLead\">\n                            <strong>Brenda Long, Adam Sheaffer, & Sage Klein</strong>\n                        </p>\n\n                        <p className=\"lead thanksLead\">\n                            Cupcake ipsum dolor. Sit amet soufflé sesame snaps marshmallow gummies. Cookie oat cake cotton candy candy pudding ice cream chocolate bar toffee croissant.\n                        </p>\n                    </div>\n\n                    <div className=\"col-lg-6 mr-auto\">\n                        <p className=\"lead thanksLead\">\n                            <strong>John Wark</strong>\n                        </p>\n\n                        <p className=\"lead thanksLead\">\n                            Cupcake ipsum dolor. Sit amet soufflé sesame snaps marshmallow gummies. Cookie oat cake cotton candy candy pudding ice cream chocolate bar toffee croissant.\n                        </p>\n                    </div>\n                </div>\n\n                <div className=\"text-center mt-4\">\n                    <RSVPButton />\n                </div>\n            </div>\n        </section>\n    )\n}","import React from 'react'\n\nexport const Footer = () => {\n    return (\n        <section className='footerContainer'>\n            <footer className=\"footer text-left\">\n                <div className=\"container\">\n                    <div className=\"row\">\n\n                        {/* Footer Cohort Locations */}\n                        <div className=\"col-lg-6 mb-5 mb-md-0\">\n                            <h4 className=\"text-uppercase mb-4\">Cohort Member Locations</h4>\n\n                            <p className=\"lead mb-0\">\n                                C43 was a remote cohort from start to finish. Here's where all of us lived and worked during our time together:\n                            </p>\n                            <br />\n\n                            <ul className=\"cohortLocationsList\">\n                                <li>Joelton, TN</li>\n                                <li>Franklin, TN</li>\n                                <li>Knoxville, TN</li>\n                                <li>Lebanon, TN</li>\n                                <li>Murfreesboro, TN</li>\n                                <li>Nashville, TN</li>\n                                <li>Spring Hill, TN</li>\n                                <li>Springfield, TN</li>\n                                <li>Richmond, KY</li>\n                                <li>Tallahassee, FL</li>\n                            </ul>\n                        </div>\n\n                        {/* Footer NSS Info */}\n                        <div className=\"col-lg-6\">\n                            <h4 className=\"text-uppercase mb-4\">About NSS</h4>\n                            <p className=\"lead mb-0\">\n                                Nashville Software School is a Tennessee non-profit corporation.\n                                Our mission is to expand the technology workforce in middle Tennessee by providing motivated individuals\n                                with access to a career in software development through training, mentorship, and learning-by-doing.\n                            </p>\n\n                            <br />\n\n                            <p className=\"lead mb-0\">\n                                <a href=\"http://nashvillesoftwareschool.com/\" target=\"_blank\" className=\"learnMoreBtn\">\n                                    Learn More\n                                </a>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </footer>\n\n            <div className=\"copyright py-4 text-center text-white\">\n                <div className=\"container\"><small>Copyright © {new Date().getFullYear()} Nashville Software School Day Cohort 43. All Rights Reserved.</small></div>\n            </div>\n        </section>\n    )\n}","import React from 'react';\nimport { Card, Button, ButtonGroup, Image, OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nexport const CardHTML = ({mate}) => {\n\n    // Array to use to render the contact links for each card\n    const contactList = [mate.linkedIn, mate.github, mate.personalSite, mate.dribbble]\n\n    const makeBanner = (studentFocus) => {\n        if(studentFocus === \"Front-End UI/UX Developer\"){\n            return (\n                    <div className=\"card-focus-banner card-focus-banner--uiux\">\n                        <p>{studentFocus}</p>\n                    </div>\n            )\n        }\n        else if (studentFocus === \"Full-Stack C# Developer\"){\n            return (\n                    <div className=\"card-focus-banner card-focus-banner--fullstack\">\n                        <p>{studentFocus}</p>\n                    </div>  \n            )\n        }\n    }\n\n    const makeContactList = () => {\n        const contactListHTML = contactList.map(contactLink => {\n            let contactIconPath = \"\"\n            let contactIconName = \"\"\n            let output = null\n            // if a contact property of student is not \"\", make contact icon HTML\n            if(contactLink.indexOf(\"linkedin\", 0) > 0){\n                contactIconPath = \"icons/linkedIn.png\"\n                contactIconName = \"LinkedIn\"\n            }\n            else if(contactLink.indexOf(\"github\", 0) > 0){\n                contactIconPath = \"icons/github.svg.png\"\n                contactIconName = \"GitHub\"\n            }\n            else if(contactLink.indexOf(\"dribbble\", 0) > 0){\n                contactIconPath = \"icons/dribbble_ball.png\"\n                contactIconName = \"Dribbble\"\n            }\n            else {\n                contactIconPath = \"icons/personalSite.png\"\n                contactIconName = \"Website\"\n            }\n            \n            if(contactLink !== \"\"){\n                output = \n                    <>\n                        <div className=\"btn-box\">\n                        <OverlayTrigger\n                            placement=\"top\"\n                            delay={{ show: 100, hide: 100 }}\n                            overlay={renderTooltip(contactIconName)}\n                            >\n                            <Button className={`btn-social-link ${contactIconName}-link`} href={contactLink} target=\"_blank\" >\n                                <Image src={contactIconPath} roundedCircle fluid/>\n                            </Button>\n                        </OverlayTrigger>\n                        </div>\n                    </>\n            }\n\n            return output // this return is for the .map()\n\n            \n        })\n        return contactListHTML\n    }\n\n\n    // this is the textbox that appears over a link on hover\n    const renderTooltip = (props) => {\n        return (\n            <Tooltip id=\"button-tooltip\" {...props}>\n                {props}\n            </Tooltip>\n        )  \n    }\n\n\n    return (\n        <>\n            <Card className=\"studentCard\">\n                <Card.Header>\n                    {makeBanner(mate.focus)}\n                </Card.Header>\n\n                <Card.Img src={mate.photo} />\n                <Card.Body className=\"card-content\">\n                    <Card.Title as=\"h4\" className=\"card-name\">{`${mate.firstName} ${mate.lastName}`}</Card.Title>\n                    <Card.Text>\n                    What will go in the card text?\n                    </Card.Text>\n                </Card.Body>\n                <Card.Footer>\n                    <ButtonGroup className=\"icons\" aria-label=\"contact-links\">\n                        {makeContactList()}\n                    </ButtonGroup>\n                </Card.Footer>\n            </Card>\n        </>\n    )\n}","// By Audrey Thomasson\n\nimport React, { useEffect, useState } from \"react\"\nimport { CardHTML } from \"./Card\"\n\nexport const CardList = ({filteredMates}) => {\n\nreturn (\n    <>  \n        {filteredMates.map(mate => {\n            return <>\n\n                        <div className=\"col-md-6 col-lg-4 mb-5\">                    \n                            <CardHTML key={mate.id} mate={mate} />\n\n                        </div>\n                    </>\n                })\n            }\n\n    </>\n)}","import { useEffect, useState } from \"react\"\nimport { Container, Row, InputGroup, FormControl } from 'react-bootstrap'\nimport { CardList } from \"../cards/CardList\";\n\nexport const CheckboxView = () => {\n\tconst [allMates, setAllMates] = useState([]);\n\tconst [showMates, setShowMates] = useState([]);\n\t//checkbox view\n\tconst [checkFE, setCheckFE] = useState(false);\n\tconst [checkBE, setCheckBE] = useState(false);\n\t\n\t// function to make call to database to get all the classmates\n\t const getAllMates = () => {\n\t\treturn fetch (\"database.json\")\n\t\t  .then(response => response.json())\n\t}\n\tconst handleCheckChange = (event) => {\n\t\t//first confirm that at least one is true\n\t\tif(event.target.name === \"FEWD\"){\n\t\t\tconst newValue = checkFE ? false : true;\n\t\t\tif(!checkBE && !newValue){\n\t\t\t\t//both are false so set them both to true\n\t\t\t\tsetCheckFE(true);\n\t\t\t\tsetCheckBE(true);\n\t\t\t}else{\n\t\t\t\tsetCheckFE(newValue)\n\t\t\t}\n\t\t}else if(event.target.name === \"BEWD\"){\n\t\t\tconst newValue = checkBE ? false: true;\n\t\t\tif(!checkFE && !newValue){\n\t\t\t\t//both are false so set them both to true\n\t\t\t\tsetCheckFE(true);\n\t\t\t\tsetCheckBE(true);\n\t\t\t}else{\n\t\t\t\tsetCheckBE(newValue)\n\t\t\t}\n\t\t}\n\t}\n\t// function to alphabetize by first name to create filtered list of all classmates\n\tconst filterNames = (allMates) => {\n\t\tconst alphaMates = allMates.sort(function(a, b) {\n\t\tconst nameA = a.firstName.toUpperCase(); // ignore upper and lowercase\n\t\tconst nameB = b.firstName.toUpperCase(); // ignore upper and lowercase\n\t\t\tif (nameA < nameB) {\n\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (nameA > nameB) {\n\t\t\treturn 1;\n\t\t\t}\n\t\t\t// names must be equal\n\t\t\treturn 0;\n\t\t})\n\t\treturn alphaMates\n\t}\n\n\t// Get all the classmates from the database\n\tuseEffect(() => {\n\t\tgetAllMates()\n\t\t  .then(data => {\n\t\t\tsetAllMates(filterNames(data.cohortMates))\n\t\t  })\n\t  }, [])\n\t  useEffect(() => {\n\t\tif(checkFE && checkBE){\n\t\t\tsetShowMates(allMates)\n\t\t}else if (!checkFE && !checkBE){\n\t\t\tsetShowMates(allMates)\n\t\t}else if(checkFE && !checkBE){\n\t\t\tsetShowMates(allMates.filter(mate => mate.focus.includes('UI/UX')))\n\t\t}else if(!checkFE && checkBE){\n\t\t\tsetShowMates(allMates.filter(mate => mate.focus.includes('Full-Stack')))\n\t\t}\n\t}, [checkFE, checkBE, allMates])\n\t\n\treturn (\n\t\t<>\n\t\t\t<section id=\"boxes\">\n\t\t\t\t<h3>What are you looking for?</h3>\n\t\t\t\t<div className=\"Rectangle FE\">\n\t\t\t\t\t<h2 className=\"FEText\">Front-End UI/UX Developer</h2>\n\t\t\t\t\t\t<label className=\"checkbox\">\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"FEWD\" checked={checkFE} \n\t\t\t\t\t\tonChange={(event) => handleCheckChange(event)}/>\n\t\t\t\t\t\t<span class=\"info\"></span>\n\t\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"Rectangle Full\">\n\t\t\t\t\t<h2 className=\"FSText\">Full-Stack C# Developer</h2>\n\t\t\t\t\t<label className=\"checkbox\">\n\t\t\t\t\t<input type=\"checkbox\" className=\"checkbox\" name=\"BEWD\" checked={checkBE} \n\t\t\t\t\tonChange={(event) => handleCheckChange(event)}/>\n\t\t\t\t\t<span class=\"warning\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t<Container id=\"classmates\">\n\t\t\t\t<Row id=\"classmates-container\">\n\t\t\t\t\t<CardList filteredMates={showMates} />\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t  </>\n\t)\n}\n\n{/* <div className=\"container front\">\n\t\t\t\t\t\n\t\t\t\t\t<InputGroup.Checkbox className=\"checkmark\" name=\"FEWD\" checked={checkFE} \n\t\t\t\t\tonChange={(event) => handleCheckChange(event)}/>\n\t\t\t\t\t<label className=\"FEText\">Front-End UI/UX Developer</label>\n\t\t\t</div>\n\t\t\t<div className=\"container full\">\n\t\t\t\t\t<InputGroup.Checkbox className=\"checkmark1\" name=\"BEWD\" checked={checkBE} \n\t\t\t\t\tonChange={(event) => handleCheckChange(event)}/>\n\t\t\t\t\t<label className=\"FSText\">Full-Stack C# Developer</label>\n\t\t\t\n\t\t\t</div> */}","import React from \"react\";\nimport { NavBar } from './components/nav/NavBar'\nimport { Header } from './components/header/Header'\nimport { Thanks } from './components/thanks/Thanks'\nimport \"./scss/styles.scss\";\nimport { Footer } from './components/footer/Footer'\nimport { CheckboxView } from \"./components/checkboxes/Checkbox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Header />\n      <CheckboxView />\n\n      <Thanks />\n      <Footer />\n\n      {/* Scroll to Top Button (Only visible on small and extra-small screen sizes) */}\n      <div className=\"scroll-to-top d-lg-none position-fixed\">\n        <a className=\"js-scroll-trigger d-block text-center text-white rounded\" href=\"#page-top\"><i className=\"fa fa-chevron-up\"></i></a>\n      </div>\n    </div>\n\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n\n  <App />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}